def DEPLOY_GIT_SCOPE
def DEPLOY_NAMESPACE
def NAMESPACE_APP_HOST
def REGISTRY_HOST
def APP_DB_HOST
def APP_DB_PORT
def JINJA2_VARS_FILE_PATH

def generateExtHttp(name, host, extHttpsPort, varsPath) {
    sh "jinja2 -D name=$name -D host=$host -Dext_https_port=$extHttpsPort distrib/templates/ext-http/service-entry.yaml $varsPath > distrib/${name}-service-entry.yaml"
    sh "jinja2 -D name=$name -D host=$host -Dext_https_port=$extHttpsPort distrib/templates/ext-http/virtual-service.yaml $varsPath > distrib/${name}-virtual-service.yaml"
    sh "jinja2 -D name=$name -D host=$host -Dext_https_port=$extHttpsPort distrib/templates/ext-http/destination-rule.yaml $varsPath > distrib/${name}-destination-rule.yaml"
    sh "jinja2 -D name=$name -D host=$host -Dext_https_port=$extHttpsPort distrib/templates/ext-http/service.yaml $varsPath > distrib/${name}-service.yaml"

    return "-f distrib/${name}-service.yaml " +
            "-f distrib/${name}-service-entry.yaml " +
            "-f distrib/${name}-virtual-service.yaml " +
            "-f distrib/${name}-destination-rule.yaml "
}

def resolveAddress(host) {
    sh(
            encoding: 'UTF-8',
            returnStdout: true,
            script: """getent hosts $host | awk 'NR==1{ print \$1 }'"""
    ).trim()
}

def generateImageTag(container) {
    def scope = sh(encoding: 'UTF-8', returnStdout: true, script: 'git name-rev --name-only HEAD')
            .trim()
            .tokenize('/')
            .last()
            .toLowerCase()

    return 'pro.ra-tech/giga-ai-agent/' + scope + '/' + container + ':latest'
}

static def removeProtocol(url) {
    return url.substring('https://'.length())
}

pipeline {
    agent { label 'linux' }

    parameters {
        string(name: 'core_app_image', description: 'Core image tag to use in deploy')
        string(name: 'core_db_migrate_image', description: 'Core db migrations image')
    }

    stages {
        stage('Determine git scope') {
            steps {
                script {
                    raTechNotify("Starting job *${JOB_NAME}*", true)

                    DEPLOY_GIT_SCOPE = BRANCH_NAME.tokenize('/').last().toLowerCase()
                    println "Git branch scope: '${DEPLOY_GIT_SCOPE}'"
                }
            }
        }

        stage('Determine stand specific params') {
            steps {
                script {
                    if (BRANCH_NAME.startsWith('release/')) {
                        DEPLOY_NAMESPACE = 'giga-ai-agent'
                        NAMESPACE_APP_HOST = 'api.giga-ai-agent.cloud.ra-tech.pro'
                        APP_DB_HOST = 'giga-ai-agent.db.ra-tech.pro'
                        APP_DB_PORT = '5555'
                        REGISTRY_HOST = removeProtocol(DOCKER_REGISTRY_HOST)
                        JINJA2_VARS_FILE_PATH = 'distrib/deploy/vars.yaml'
                    } else {
                        DEPLOY_NAMESPACE = 'giga-ai-agent-test'
                        NAMESPACE_APP_HOST = 'api.giga-ai-agent.test.cloud.ra-tech.pro'
                        APP_DB_HOST = 'giga-ai-agent.db.ra-tech.pro'
                        APP_DB_PORT = '5555'
                        REGISTRY_HOST = removeProtocol(SNAPSHOTS_DOCKER_REGISTRY_HOST)
                        JINJA2_VARS_FILE_PATH = 'distrib/deploy/test-vars.yaml'
                    }
                    println "Namespace to deploy app: $DEPLOY_NAMESPACE"
                    println "App host: $NAMESPACE_APP_HOST"
                }
            }
        }

        stage('Cleanup k8s namespace') {
            steps {
                script {
                    def namespace = DEPLOY_NAMESPACE
                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        sh 'kubectl version'

                        println "Deleting core deployment and pods"
                        sh "kubectl delete deployment -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl wait --for=delete pod -l app=giga-ai-agent-core --timeout 10m -n $namespace"

                        println "Deleting other core manifests"
                        sh "kubectl delete service -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete virtualservice -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete destinationrule -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete gateway -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete networkpolicy -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete configmap -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete job -l app.kubernetes.io/component=core -n $namespace"
                        sh "kubectl delete serviceentry -l app.kubernetes.io/component=core -n $namespace"

                        println "Deleting istio components"
                        sh "kubectl delete deployment -l app.kubernetes.io/component=istio-egressgw -n $namespace"
                        sh "kubectl wait --for=delete pod -l app=giga-ai-agent-egressgw -n $namespace"
                        sh "kubectl delete service -l app.kubernetes.io/component=istio-egressgw -n $namespace"
                        sh "kubectl delete role -l app.kubernetes.io/component=istio-egressgw -n $namespace"
                        sh "kubectl delete rolebinding -l app.kubernetes.io/component=istio-egressgw -n $namespace"
                        sh "kubectl delete serviceaccount -l app.kubernetes.io/component=istio-egressgw -n $namespace"
                        sh "kubectl delete networkpolicy -l app.kubernetes.io/component=istio -n $namespace"
                    }
                }
            }
        }

        stage('Deploy to k8s') {
            steps {
                script {
                    def varsPath = JINJA2_VARS_FILE_PATH
                    def namespace = DEPLOY_NAMESPACE
                    def host = NAMESPACE_APP_HOST
                    def egressTcpPort = '9999'
                    def solrHost = SOLR_HOST
                    def vaultHost = removeProtocol(VAULT_HOST)
                    def gigaAuthHost = GIGA_AUTH_HOST
                    def gigaChatHost = GIGA_CHAT_HOST
                    def telegramHost = TELEGRAM_API_HOST
                    def registry = REGISTRY_HOST
                    def dbHost = APP_DB_HOST
                    def dbPort = APP_DB_PORT
                    def dbAddress = resolveAddress(dbHost)
                    def yandexAuthHost = YANDEX_GPT_AUTH_HOST
                    def yandexApiHost = YANDEX_GPT_API_HOST
                    def hfsHost = HFS_HOST

                    def solrApply = ""
                    def vaultApply = ""
                    def gigaAuthApply = ""
                    def gigaChatApply = ""
                    def telegramApply = ""
                    def yandexAuthApply = ""
                    def yandexApiApply = ""
                    def hfsApply = ""

                    def coreImageTag = params.core_app_image ? params.core_app_image : generateImageTag('giga-ai-agent-core')
                    def dbMigrateImageTag = params.core_db_migrate_image ? params.core_db_migrate_image : generateImageTag('core-db-migrate')

                    withPythonEnv('Python-3') {
                        sh 'pip install -U jinja2-cli pyyaml'

                        sh 'jinja2 --help'

                        // Istio egress gateway
                        sh "jinja2 distrib/templates/istio/egressgw-deployment.yaml $varsPath > distrib/egressgw-deployment.yaml"
                        sh "jinja2 distrib/templates/istio/egressgw-service.yaml $varsPath > distrib/egressgw-service.yaml"
                        sh "jinja2 distrib/templates/network-policy-egress.yaml $varsPath > distrib/network-policy-egress.yaml"
                        sh "jinja2 distrib/templates/istio/egressgw-service-account.yaml $varsPath > distrib/egressgw-service-account.yaml"
                        sh "jinja2 distrib/templates/istio/egressgw-role.yaml $varsPath > distrib/egressgw-role.yaml"
                        sh "jinja2 distrib/templates/istio/egressgw-role-binding.yaml $varsPath > distrib/egressgw-role-binding.yaml"
                        sh "jinja2 distrib/templates/configmaps/egress-vault-agent.yaml $varsPath > distrib/egress-vault-agent.yaml"

                        // main app
                        sh "jinja2 -D image_tag=$coreImageTag distrib/templates/deployment.yaml $varsPath > distrib/deployment.yaml"
                        sh "jinja2 distrib/templates/service.yaml $varsPath > distrib/service.yaml"
                        sh "jinja2 distrib/templates/network-policy-restricted.yaml $varsPath > distrib/network-policy-restricted.yaml"
                        sh "jinja2 distrib/templates/ingress-gateway.yaml $varsPath > distrib/ingress-gateway.yaml"
                        sh "jinja2 distrib/templates/egress-gateway.yaml $varsPath > distrib/egress-gateway.yaml"
                        sh "jinja2 distrib/templates/virtual-service.yaml $varsPath > distrib/virtual-service.yaml"
                        sh "jinja2 distrib/templates/destination-rule.yaml $varsPath > distrib/destination-rule.yaml"
                        sh "jinja2 distrib/templates/configmaps/core-fluentbit.yaml $varsPath > distrib/core-fluentbit.yaml"
                        sh "jinja2 distrib/templates/egw-destination-rule.yaml $varsPath > distrib/egw-destination-rule.yaml"

                        // database
                        sh "jinja2 -D db_address=$dbAddress distrib/templates/db/db-service-entry.yaml $varsPath > distrib/db-service-entry.yaml"
                        sh "jinja2 -D db_address=$dbAddress distrib/templates/db/db-virtual-service.yaml $varsPath > distrib/db-virtual-service.yaml"
                        sh "jinja2 distrib/templates/db/db-destination-rule.yaml $varsPath > distrib/db-destination-rule.yaml"
                        sh "jinja2 -D db_address=$dbAddress distrib/templates/db/db-service.yaml $varsPath > distrib/db-service.yaml"

                        // db-migrate
                        sh "jinja2 -D image_tag=$dbMigrateImageTag distrib/templates/core-db-migrate-job.yaml $varsPath > distrib/core-db-migrate-job.yaml"

                        // Solr
                        solrApply = generateExtHttp('solr', solrHost, 443, varsPath)

                        // Vault
                        vaultApply = generateExtHttp('vault', vaultHost, 443, varsPath)
                        sh "jinja2 distrib/templates/configmaps/core-vault-agent.yaml $varsPath > distrib/core-vault-agent.yaml"
                        sh "jinja2 distrib/templates/configmaps/db-migrate-vault-agent.yaml $varsPath > distrib/db-migrate-vault-agent.yaml"

                        // Giga Chat API
                        gigaAuthApply = generateExtHttp('giga-auth', gigaAuthHost, 9443, varsPath)
                        gigaChatApply = generateExtHttp('giga-chat', gigaChatHost, 443, varsPath)

                        // Telegram API
                        telegramApply = generateExtHttp('telegram-bot', telegramHost, 443, varsPath)

                        // Yandex GPT
                        yandexAuthApply = generateExtHttp('yandex-gpt-auth', yandexAuthHost, 443, varsPath)
                        yandexApiApply = generateExtHttp('yandex-gpt-api', yandexApiHost, 443, varsPath)

                        // HFS
                        hfsApply = generateExtHttp('hfs', hfsHost, 443, varsPath)

                        // Kafka
                        def kafkaHost = 'kafka-1.ra-tech.pro'
                        def kafkaAddress = resolveAddress(kafkaHost)
                        def kafkaPort = 9093
                        sh "jinja2 -D kafka_id=1 -D kafka_address=$kafkaAddress -Dkafka_port=$kafkaPort distrib/templates/kafka/kafka-service-entry.yaml $varsPath > distrib/kafka-1-service-entry.yaml"
                        sh "jinja2 -D kafka_id=1 -D kafka_address=$kafkaAddress -Dkafka_port=$kafkaPort -Dkafka_host=$kafkaHost -Dkafka_egress_port=9092 distrib/templates/kafka/kafka-virtual-service.yaml $varsPath > distrib/kafka-1-virtual-service.yaml"
                        sh "jinja2 -D kafka_id=1 -D kafka_address=$kafkaAddress -Dkafka_port=$kafkaPort -Dkafka_host=$kafkaHost distrib/templates/kafka/kafka-destination-rule.yaml $varsPath > distrib/kafka-1-destination-rule.yaml"
                        sh "jinja2 -D kafka_id=1 -D kafka_address=$kafkaAddress -Dkafka_port=$kafkaPort distrib/templates/kafka/kafka-service.yaml $varsPath > distrib/kafka-1-service.yaml"
                    }

                    withKubeConfig([credentialsId: 'jenkins-k8s-cert', serverUrl: KUBERNETES_API_URL, namespace: namespace]) {
                        println "Applying istio egress gateway manifests"
                        sh 'kubectl apply ' +
                                '-f distrib/network-policy-egress.yaml ' +
                                '-f distrib/egress-vault-agent.yaml ' +
                                '-f distrib/egressgw-service.yaml ' +
                                '-f distrib/egressgw-service-account.yaml ' +
                                '-f distrib/egressgw-role.yaml ' +
                                '-f distrib/egressgw-role-binding.yaml ' +
                                '-f distrib/egressgw-deployment.yaml'

                        sleep time: 3, unit: 'SECONDS'
                        sh "kubectl wait --for=condition=ready --timeout=5m -n $namespace pods -l app=giga-ai-agent-egressgw"

                        println "Applying core manifests"
                        sh 'kubectl apply ' +
                                '-f distrib/core-fluentbit.yaml ' +
                                '-f distrib/core-vault-agent.yaml ' +
                                '-f distrib/db-migrate-vault-agent.yaml ' +
                                '-f distrib/network-policy-restricted.yaml ' +
                                '-f distrib/service.yaml ' +
                                '-f distrib/ingress-gateway.yaml ' +
                                '-f distrib/egress-gateway.yaml ' +
                                '-f distrib/virtual-service.yaml ' +
                                '-f distrib/destination-rule.yaml ' +
                                '-f distrib/egw-destination-rule.yaml ' +
                                '-f distrib/db-service.yaml ' +
                                '-f distrib/db-service-entry.yaml ' +
                                '-f distrib/db-virtual-service.yaml ' +
                                '-f distrib/db-destination-rule.yaml ' +
                                solrApply +
                                vaultApply +
                                gigaAuthApply +
                                gigaChatApply +
                                telegramApply +
                                yandexAuthApply +
                                yandexApiApply +
                                hfsApply +
                                '-f distrib/kafka-1-service-entry.yaml ' +
                                '-f distrib/kafka-1-virtual-service.yaml ' +
                                '-f distrib/kafka-1-destination-rule.yaml ' +
                                '-f distrib/kafka-1-service.yaml '

                        // Run db migrations job
                        println "Starting db migrations job"
                        sh 'kubectl apply -f distrib/core-db-migrate-job.yaml'
                        println "Waiting for db migrations job to succeed"
                        sleep time: 3, unit: 'SECONDS'
                        sh "kubectl wait --for=condition=complete --timeout=10m -n $namespace job/core-db-migrate"

                        // Deploying main app
                        sh 'kubectl apply -f distrib/deployment.yaml'
                        sleep time: 3, unit: 'SECONDS'
                        sh "kubectl wait --for=condition=ready --timeout=5m -n $namespace pods -l app=giga-ai-agent-core"
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                raTechNotify("Job *${JOB_NAME}* completed successfully", true)
            }
        }
        failure {
            script {
                raTechNotify("Job *${JOB_NAME}* failed", true)
            }
        }
        aborted {
            script {
                raTechNotify("Job *${JOB_NAME}* aborted", true)
            }
        }
    }
}